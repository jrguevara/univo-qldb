AWSTemplateFormatVersion: '2010-09-09'
Description: QLDB Stream Lambda Cloudformation
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label: 
          default: "Unique Name Inputs"
        Parameters: 
          - AuroraDatabaseName
          - KinesisStreamName
      -
        Label: 
          default: "Inputs from Aurora Serverless"
        Parameters:
          - AuroraEndpoint
          - SubnetName
          - SecurityGroupName
Parameters:
  SecurityGroupName:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Security Group Identifier
  SubnetName:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Subnet Identifier
  AuroraEndpoint:
    Description: Aurora Endpoint Arn
    Type: String
    MinLength: '1'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  AuroraDatabaseName:
    Description: Name for Aurora database. Not the cluster name.
    Type: String
    MinLength: '1'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: streaminglab
  KinesisStreamName:
    Description: Name for Kinesis stream
    Type: String
    MinLength: '1'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: StreamingLab-KinesisStream
Resources:
  AWSKinesisAggLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Sub 'qldb-streaming-lab-${AWS::Region}'
        S3Key: lambda_layers/python/aws-kinesis-agg-0.0.1.zip
      Description: aws-kinesis-agg-streaming-lab
      LayerName: aws-kinesis-agg-streaming-lab
      LicenseInfo: MIT
  PyMySQLLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Sub 'qldb-streaming-lab-${AWS::Region}'
        S3Key: lambda_layers/python/py-mysql-0.0.1.zip
      Description: py-mysql-streaming-lab
      LayerName: py-mysql-streaming-lab
      LicenseInfo: MIT
  PyIon2JsonLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Sub 'qldb-streaming-lab-${AWS::Region}'
        S3Key: lambda_layers/python/pyion-2-json-0.0.1.zip
      Description: pyion-2-json-streaming-lab
      LayerName: pyion-2-json-streaming-lab
      LicenseInfo: MIT
  QLDBDriverLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Sub 'qldb-streaming-lab-${AWS::Region}'
        S3Key: lambda_layers/python/qldb-driver-0.0.1.zip
      Description: qldb-driver-streaming-lab
      LayerName: qldb-driver-streaming-lab
      LicenseInfo: MIT
  StreamEventDLQ:
    Type: AWS::SQS::Queue
  QLDBStreamingFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Role:
        'Fn::GetAtt':
          - QLDBLambdaRole
          - Arn
      Code:
        S3Bucket: !Sub 'qldb-streaming-lab-${AWS::Region}'
        S3Key: >-
          lambda_functions/python/QLDBStreamingFunction_10.zip
      Runtime: python3.8
      MemorySize: 512
      Timeout: 60
      Layers:
        - Ref: QLDBDriverLayer
        - Ref: PyIon2JsonLayer
        - Ref: PyMySQLLayer
        - Ref: AWSKinesisAggLayer
      Environment:
        Variables:
          RDS_HOST:
            Ref: AuroraEndpoint
          DB_NAME:
            Ref: AuroraDatabaseName
          HISTORY: 'False'
          ORDER: 'False'
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupName
        SubnetIds: !Ref SubnetName
  LambdaEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:kinesis:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':stream/'
            - Ref: KinesisStreamName
      FunctionName:
        'Fn::GetAtt':
          - QLDBStreamingFunction
          - Arn
      StartingPosition: LATEST
      MaximumRecordAgeInSeconds: 1800
      MaximumRetryAttempts: 1000
      Enabled: false
      BisectBatchOnFunctionError: true
      BatchSize: 10
      DestinationConfig:
          OnFailure:
            Destination: !GetAtt [StreamEventDLQ, Arn]
  QLDBLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
